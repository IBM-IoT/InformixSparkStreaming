-- Generated by BladeSmith 4.00.TC1B2DO NOT MODIFY. --

execute procedure ifx_allow_newline('t');

begin work;

create opaque type BoundingBox(
	internallength = 48,
	alignment = 8
);

grant usage on type BoundingBox to public;

create function BoundingBoxIn (lvarchar)
returns BoundingBox
external name "$INFORMIXDIR/extend/boundingbox.0.0/boundingbox.bld(BoundingBoxInput)" language c;

alter function BoundingBoxIn (lvarchar)
	with (Modify External Name = "$INFORMIXDIR/extend/boundingbox.0.0/boundingbox.bld(BoundingBoxInput)");

alter function BoundingBoxIn (lvarchar)
	with (add parallelizable);

alter function BoundingBoxIn (lvarchar)
	with (add not variant);

grant execute on function BoundingBoxIn (lvarchar) to public;

create implicit cast
	(
		lvarchar as BoundingBox
		with  BoundingBoxIn
	);

create function BoundingBoxOut (BoundingBox)
returns lvarchar
external name "$INFORMIXDIR/extend/boundingbox.0.0/boundingbox.bld(BoundingBoxOutput)" language c;

alter function BoundingBoxOut (BoundingBox)
	with (Modify External Name = "$INFORMIXDIR/extend/boundingbox.0.0/boundingbox.bld(BoundingBoxOutput)");

alter function BoundingBoxOut (BoundingBox)
	with (add parallelizable);

alter function BoundingBoxOut (BoundingBox)
	with (add not variant);

grant execute on function BoundingBoxOut (BoundingBox) to public;

create cast
	(
		BoundingBox as lvarchar
		with  BoundingBoxOut
	);

create function BoundingBoxImpT (impexp)
returns BoundingBox
external name "$INFORMIXDIR/extend/boundingbox.0.0/boundingbox.bld(BoundingBoxImportText)" language c;

alter function BoundingBoxImpT (impexp)
	with (Modify External Name = "$INFORMIXDIR/extend/boundingbox.0.0/boundingbox.bld(BoundingBoxImportText)");

grant execute on function BoundingBoxImpT (impexp) to public;

create implicit cast
	(
		impexp as BoundingBox
		with  BoundingBoxImpT
	);

create function BoundingBoxExpT (BoundingBox)
returns impexp
external name "$INFORMIXDIR/extend/boundingbox.0.0/boundingbox.bld(BoundingBoxExportText)" language c;

alter function BoundingBoxExpT (BoundingBox)
	with (Modify External Name = "$INFORMIXDIR/extend/boundingbox.0.0/boundingbox.bld(BoundingBoxExportText)");

grant execute on function BoundingBoxExpT (BoundingBox) to public;

create cast
	(
		BoundingBox as impexp
		with  BoundingBoxExpT
	);

create function BoundingBoxImpB (impexpbin)
returns BoundingBox
external name "$INFORMIXDIR/extend/boundingbox.0.0/boundingbox.bld(BoundingBoxImportBinary)" language c;

alter function BoundingBoxImpB (impexpbin)
	with (Modify External Name = "$INFORMIXDIR/extend/boundingbox.0.0/boundingbox.bld(BoundingBoxImportBinary)");

grant execute on function BoundingBoxImpB (impexpbin) to public;

create implicit cast
	(
		impexpbin as BoundingBox
		with  BoundingBoxImpB
	);

create function BoundingBoxExpB (BoundingBox)
returns impexpbin
external name "$INFORMIXDIR/extend/boundingbox.0.0/boundingbox.bld(BoundingBoxExportBinary)" language c;

alter function BoundingBoxExpB (BoundingBox)
	with (Modify External Name = "$INFORMIXDIR/extend/boundingbox.0.0/boundingbox.bld(BoundingBoxExportBinary)");

grant execute on function BoundingBoxExpB (BoundingBox) to public;

create cast
	(
		BoundingBox as impexpbin
		with  BoundingBoxExpB
	);

create function Compare (BoundingBox,BoundingBox)
returns integer
external name "$INFORMIXDIR/extend/boundingbox.0.0/boundingbox.bld(BoundingBoxCompare)" language c;

alter function Compare (BoundingBox,BoundingBox)
	with (Modify External Name = "$INFORMIXDIR/extend/boundingbox.0.0/boundingbox.bld(BoundingBoxCompare)");

alter function Compare (BoundingBox,BoundingBox)
	with (add parallelizable);

alter function Compare (BoundingBox,BoundingBox)
	with (add not variant);

grant execute on function Compare (BoundingBox,BoundingBox) to public;

create function Equal (BoundingBox,BoundingBox)
returns boolean
external name "$INFORMIXDIR/extend/boundingbox.0.0/boundingbox.bld(BoundingBoxEqual)" language c;

alter function Equal (BoundingBox,BoundingBox)
	with (Modify External Name = "$INFORMIXDIR/extend/boundingbox.0.0/boundingbox.bld(BoundingBoxEqual)");

alter function Equal (BoundingBox,BoundingBox)
	with (add parallelizable);

alter function Equal (BoundingBox,BoundingBox)
	with (add not variant);

grant execute on function Equal (BoundingBox,BoundingBox) to public;

create function NotEqual (BoundingBox,BoundingBox)
returns boolean
external name "$INFORMIXDIR/extend/boundingbox.0.0/boundingbox.bld(BoundingBoxNotEqual)" language c;

alter function NotEqual (BoundingBox,BoundingBox)
	with (Modify External Name = "$INFORMIXDIR/extend/boundingbox.0.0/boundingbox.bld(BoundingBoxNotEqual)");

alter function NotEqual (BoundingBox,BoundingBox)
	with (add parallelizable);

alter function NotEqual (BoundingBox,BoundingBox)
	with (add not variant);

grant execute on function NotEqual (BoundingBox,BoundingBox) to public;

create function Contains (BoundingBox,BoundingBox)
returns boolean
external name "$INFORMIXDIR/extend/boundingbox.0.0/boundingbox.bld(BoundingBoxContains)" language c;

alter function Contains (BoundingBox,BoundingBox)
	with (Modify External Name = "$INFORMIXDIR/extend/boundingbox.0.0/boundingbox.bld(BoundingBoxContains)");

alter function Contains (BoundingBox,BoundingBox)
	with (add parallelizable);

alter function Contains (BoundingBox,BoundingBox)
	with (add not variant);

grant execute on function Contains (BoundingBox,BoundingBox) to public;

create function Within (BoundingBox,BoundingBox)
returns boolean
external name "$INFORMIXDIR/extend/boundingbox.0.0/boundingbox.bld(BoundingBoxWithin)" language c;

alter function Within (BoundingBox,BoundingBox)
	with (Modify External Name = "$INFORMIXDIR/extend/boundingbox.0.0/boundingbox.bld(BoundingBoxWithin)");

alter function Within (BoundingBox,BoundingBox)
	with (add parallelizable);

alter function Within (BoundingBox,BoundingBox)
	with (add not variant);

grant execute on function Within (BoundingBox,BoundingBox) to public;

create function Union (BoundingBox,BoundingBox,BoundingBox)
returns integer
external name "$INFORMIXDIR/extend/boundingbox.0.0/boundingbox.bld(BoundingBoxUnion)" language c;

alter function Union (BoundingBox,BoundingBox,BoundingBox)
	with (Modify External Name = "$INFORMIXDIR/extend/boundingbox.0.0/boundingbox.bld(BoundingBoxUnion)");

alter function Union (BoundingBox,BoundingBox,BoundingBox)
	with (add parallelizable);

alter function Union (BoundingBox,BoundingBox,BoundingBox)
	with (add not variant);

grant execute on function Union (BoundingBox,BoundingBox,BoundingBox) to public;

create function Size (BoundingBox,double precision)
returns integer
external name "$INFORMIXDIR/extend/boundingbox.0.0/boundingbox.bld(BoundingBoxSize)" language c;

alter function Size (BoundingBox,double precision)
	with (Modify External Name = "$INFORMIXDIR/extend/boundingbox.0.0/boundingbox.bld(BoundingBoxSize)");

alter function Size (BoundingBox,double precision)
	with (add parallelizable);

alter function Size (BoundingBox,double precision)
	with (add not variant);

grant execute on function Size (BoundingBox,double precision) to public;

create function Inter (BoundingBox,BoundingBox,BoundingBox)
returns integer
external name "$INFORMIXDIR/extend/boundingbox.0.0/boundingbox.bld(BoundingBoxInter)" language c;

alter function Inter (BoundingBox,BoundingBox,BoundingBox)
	with (Modify External Name = "$INFORMIXDIR/extend/boundingbox.0.0/boundingbox.bld(BoundingBoxInter)");

alter function Inter (BoundingBox,BoundingBox,BoundingBox)
	with (add not variant);

grant execute on function Inter (BoundingBox,BoundingBox,BoundingBox) to public;

create function Overlap (BoundingBox,BoundingBox)
returns boolean
external name "$INFORMIXDIR/extend/boundingbox.0.0/boundingbox.bld(BoundingBoxOverlap)" language c;

alter function Overlap (BoundingBox,BoundingBox)
	with (Modify External Name = "$INFORMIXDIR/extend/boundingbox.0.0/boundingbox.bld(BoundingBoxOverlap)");

alter function Overlap (BoundingBox,BoundingBox)
	with (add parallelizable);

alter function Overlap (BoundingBox,BoundingBox)
	with (add not variant);

grant execute on function Overlap (BoundingBox,BoundingBox) to public;

create function BoundingBoxVersion ()
returns lvarchar
external name "$INFORMIXDIR/extend/boundingbox.0.0/boundingbox.bld(BoundingBoxVersion)" language c;

alter function BoundingBoxVersion ()
	with (Modify External Name = "$INFORMIXDIR/extend/boundingbox.0.0/boundingbox.bld(BoundingBoxVersion)");

alter function BoundingBoxVersion ()
	with (add not variant);

grant execute on function BoundingBoxVersion () to public;

create opclass BoundingBox_ops for rtree
	strategies (Overlap, Equal, Contains, Within)
	support (Union, Size, Inter);
insert into sysbldirequired
	(bldi_id, bld_id)
values
(
	"ifxrltree1",
	"boundingbox.0.0"
);

commit work;

